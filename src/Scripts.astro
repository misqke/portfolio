<!-- activate nav links on scroll -->
<script>
  // @ts-ignore
  const sections = document.querySelectorAll("section");
  const links = document.querySelectorAll("[data-link]");
  const title = document.querySelector("#hero h1");
  let heroTitleContainer = document.querySelector("#hero .container-inner");
  const navTitleContainer = document.getElementById("nav-title-container");
  const half = window.innerHeight / 2;

  let isHero = true;

  window.addEventListener("scroll", async (e) => {
    for (let i = 1; i < sections.length; i++) {
      const rect = sections[i].getBoundingClientRect();
      if (rect.top < half) {
        if (i >= 2) links[i - 2].classList.remove("active");
        links[i - 1].classList.add("active");
      } else {
        links[i - 1].classList.remove("active");
      }
    }

    // if (window.scrollY > 100 && isHero) {
    //   if (!document.startViewTransition) {
    //     navTitleContainer.append(title);
    //     isHero = false;
    //     return;
    //   }

    //   title.style.viewTransitionName = "move-title";

    //   const transition = document.startViewTransition(() => {
    //     navTitleContainer.append(title);
    //   });

    //   await transition.ready;
    //   title.style.viewTransitionName = "";
    //   isHero = false;
    // } else if (window.scrollY < 100 && !isHero) {
    //   if (!document.startViewTransition) {
    //     heroTitleContainer.append(title);
    //     isHero = true;
    //     return;
    //   }

    //   title.style.viewTransitionName = "move-title";

    //   const transition = document.startViewTransition(() => {
    //     heroTitleContainer.append(title);
    //   });

    //   await transition.ready;
    //   title.style.viewTransitionName = "";
    //   isHero = true;
    // }
  });
</script>

<!-- animate on scroll into view -->
<script>
  const topPadding = document
    .getElementById("header-inner")
    .getBoundingClientRect().bottom;
  let options = {
    root: null,
    rootMargin: `-${topPadding + 50}px 0px -50px 0px`,
    threshold: 0.2,
  };

  const obs = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) entry.target.classList.add("visible");
      else entry.target.classList.remove("visible");
    });
  }, options);

  const animEls = document.querySelectorAll("[scroll-anim]");
  animEls.forEach((el) => obs.observe(el));
</script>
